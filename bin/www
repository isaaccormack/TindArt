#!/usr/bin/env node
/* tslint:disable */
/**
 * Module dependencies.
 */

var appModule = require("../dist/app");
var dbModule = require("../dist/database/dbclient");
var debug = require("debug")("myapp:server");
var http = require("http");
var photoService = require("../dist/services/PhotoService");
var userService = require("../dist/services/UserService");
var app = appModule.Server.bootstrap().app;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Connect to database, then listen on provided port, on all network interfaces.
 */

dbModule.initDb((err, db) => {
  if (err) {
    console.log("Failed to connect to database.");
    throw err;
  }
  console.log("Successfully connected to database.");
  // Initialize the services with the database object
  photoService.PhotoService.initService({db});
  userService.UserService.initService({db});
  server.listen(port);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}
